{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","SortType","App","sortField","setSortField","useState","none","isReversed","setIsReversed","sortedGoods","sortBy","goods","sortMethod","preparedGoods","alphabet","sort","a","b","localeCompare","length","visibleGoods","reverse","_jsxs","className","children","_jsx","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"wOAKO,MAAMA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UACA,IAEGC,EAAQ,SAARA,GAAQ,OAARA,EAAQ,oBAARA,EAAQ,gBAARA,EAAQ,QAARA,CAAQ,EAARA,GAAQ,IAMb,MAiBaC,EAAgBA,KAC3B,MAAOC,EAAWC,GAAgBC,mBAASJ,EAASK,OAC7CC,EAAYC,GAAiBH,oBAAS,GAEvCI,EArBOC,EAACC,EAAiBC,KAC/B,MAAMC,EAAgB,IAAIF,GAE1B,OAAQC,GACN,KAAKX,EAASa,SAGZ,OAFAD,EAAcE,MAAK,CAACC,EAAGC,IAAMD,EAAEE,cAAcD,KAEtCJ,EACT,KAAKZ,EAASkB,OAGZ,OAFAN,EAAcE,MAAK,CAACC,EAAGC,IAAMD,EAAEG,OAASF,EAAEE,SAEnCN,EACT,QACE,OAAOA,EACX,EAOoBH,CAAOV,EAAiBG,GACtCiB,EAAeb,EAAaE,EAAYY,UAAYZ,EAE1D,OACEa,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UACEC,KAAK,SACLH,UAAWI,IAAG,SAAU,UAAW,CACjC,WAAYxB,IAAcF,EAASa,WAErCc,QAASA,IAAMxB,EAAaH,EAASa,UAAUU,SAChD,wBAIDC,cAAA,UACEC,KAAK,SACLH,UAAWI,IAAG,SAAU,aAAc,CACpC,WAAYxB,IAAcF,EAASkB,SAErCS,QAASA,IAAMxB,EAAaH,EAASkB,QAAQK,SAC9C,mBAIDC,cAAA,UACEC,KAAK,SACLH,UAAWI,IAAG,SAAU,aAAc,CACpC,YAAapB,IAEfqB,QAASA,IAAMpB,GAAeD,GAAYiB,SAC3C,aAICrB,GAAaI,IACbkB,cAAA,UACEC,KAAK,SACLH,UAAU,4BACVK,QAASA,KACPxB,EAAaH,EAASK,MACtBE,GAAc,EAAM,EACpBgB,SACH,aAMLC,cAAA,MAAAD,SACGJ,EAAaS,KAAKC,GACjBL,cAAA,MAAe,UAAQ,OAAMD,SAC1BM,GADMA,SAKT,ECnGVC,IAASC,OAAOP,cAACvB,EAAG,IAAK+B,SAASC,eAAe,Q","file":"static/js/main.8432de20.chunk.js","sourcesContent":["import \"bulma/css/bulma.css\";\nimport \"./App.scss\";\nimport React, { useState } from \"react\";\nimport cn from \"classnames\";\n\nexport const goodsFromServer = [\n  \"Dumplings\",\n  \"Carrot\",\n  \"Eggs\",\n  \"Ice cream\",\n  \"Apple\",\n  \"Bread\",\n  \"Fish\",\n  \"Honey\",\n  \"Jam\",\n  \"Garlic\",\n];\n\nenum SortType {\n  alphabet = \"alphabet\",\n  length = \"length\",\n  none = \"\",\n}\n\nconst sortBy = (goods: string[], sortMethod: SortType) => {\n  const preparedGoods = [...goods];\n\n  switch (sortMethod) {\n    case SortType.alphabet:\n      preparedGoods.sort((a, b) => a.localeCompare(b));\n\n      return preparedGoods;\n    case SortType.length:\n      preparedGoods.sort((a, b) => a.length - b.length);\n\n      return preparedGoods;\n    default:\n      return preparedGoods;\n  }\n};\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.none);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const sortedGoods = sortBy(goodsFromServer, sortField);\n  const visibleGoods = isReversed ? sortedGoods.reverse() : sortedGoods;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\"button\", \"is-info\", {\n            \"is-light\": sortField !== SortType.alphabet,\n          })}\n          onClick={() => setSortField(SortType.alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\"button\", \"is-success\", {\n            \"is-light\": sortField !== SortType.length,\n          })}\n          onClick={() => setSortField(SortType.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\"button\", \"is-warning\", {\n            \"is-light\": !isReversed,\n          })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField(SortType.none);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}